{"version":3,"sources":["components/SetTimer.js","App.js","serviceWorker.js","index.js"],"names":["SetTimer","props","id","title","toLowerCase","className","onClick","handleDecrease","count","handleIncrease","audio","document","getElementById","App","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","handleLengthChange","timerType","newCount","undefined","this","minutes","Math","floor","seconds","breakProps","sessionProps","convertToTime","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54b345a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SetTimer = (props) => {\r\n  const id = props.title.toLowerCase();\r\nreturn (\r\n  <div className=\"timer-container\">\r\n    <h4 id={`${id}-label`}>{props.title} Length</h4>\r\n    <div className=\"flex actions-wrapper\">\r\n      <button id={`${id}-decrement`} onClick={props.handleDecrease}>\r\n        <i className=\"fa fa-minus\" />\r\n      </button>\r\n      <span className=\"break_session\" id={`${id}-length`}>{props.count}</span>\r\n      <button id={`${id}-increment`} onClick={props.handleIncrease}>\r\n        <i className=\"fa fa-plus\" />\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n} \r\n\r\nexport default SetTimer;","import React from \"react\";\nimport \"./App.css\";\nimport SetTimer from \"./components/SetTimer\";\n\nconst audio = document.getElementById(\"beep\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loop = undefined;\n  }\n  state = {\n    breakCount: 5,\n    sessionCount: 25,\n    clockCount: 25 * 60,\n    currentTimer: \"Session\",\n    isPlaying: false,\n  };\n\n  handlePlayPause = () => {\n    const { isPlaying } = this.state;\n\n    if (isPlaying) {\n      clearInterval(this.loop);\n      this.setState({\n        isPlaying: false,\n      });\n    } else {\n      this.loop = setInterval(() => {\n        const {\n          clockCount,\n          breakCount,\n          currentTimer,\n          sessionCount,\n        } = this.state;\n\n        if (clockCount === 0) {\n          this.setState({\n            currentTimer: currentTimer === \"Session\" ? \"Break\" : \"Session\",\n            clockCount:\n              currentTimer === \"Session\" ? (breakCount * 60) : (sessionCount * 60)\n          });\n          audio.play();\n        } else {\n          this.setState({\n            clockCount: clockCount - 1,\n          });\n        }\n      }, 1000);\n      this.setState({\n        isPlaying: true\n      });\n    }\n  };\n\n  handleReset = () => {\n    this.setState({\n      breakCount: 5,\n      sessionCount: 25,\n      clockCount: 25 * 60,\n      currentTimer: \"Session\",\n      isPlaying: false,\n    });\n\n    clearInterval(this.loop);\n    audio.pause();\n    audio.currentTimer = 0;\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  convertToTime(count) {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n\n    minutes = minutes < 10 ? (\"0\"+minutes) : minutes; \n    seconds = seconds < 10 ? (\"0\"+seconds) : seconds;\n\n    return `${minutes}:${seconds}`;\n  }\n\n  handleLengthChange = (count, timerType) => {\n    const {\n       sessionCount,\n       breakCount,\n       isPlaying,\n       currentTimer,\n       } = this.state;\n\n       let newCount;\n\n       if (timerType === \"session\") {\n         newCount = sessionCount + count;\n       } else {\n         newCount = breakCount + count;\n       }\n\n     if (newCount > 0 && newCount < 61 && !isPlaying) {\n        this.setState({\n          [`${timerType}Count`]: newCount\n        });\n\n        if (currentTimer.toLowerCase() === timerType) {\n          this.setState({\n            clockCount: newCount * 60\n          })\n        }\n     }\n  }\n\n  render() {\n    const { breakCount, sessionCount, clockCount, currentTimer } = this.state;\n\n    const breakProps = {\n      title: \"Break\",\n      count: breakCount,\n      handleDecrease: ()=> this.handleLengthChange(-1, 'break'),\n      handleIncrease: ()=> this.handleLengthChange(1, 'break')\n    };\n\n    const sessionProps = {\n      title: \"Session\",\n      count: sessionCount,\n      handleDecrease: () => this.handleLengthChange(-1, \"session\"),\n      handleIncrease: () => this.handleLengthChange(1, \"session\")\n    };\n\n    return (\n      <main>\n        <div className=\"flex\">\n          <SetTimer {...breakProps} />\n          <SetTimer {...sessionProps} />\n        </div>\n        <div id=\"timer-label\" className=\"clock-container\">\n          <h2>{currentTimer}</h2>\n          <span className=\"timer\" id=\"time-left\">\n            {this.convertToTime(clockCount)}\n          </span>\n        </div>\n        <div className=\"flex\">\n          <div className=\"timer-actions\">\n            <button id=\"start_stop\" onClick={this.handlePlayPause}>\n              <i\n                className={`fa fa-2x fa-${\n                  this.state.isPlaying ? \"pause\" : \"play\"\n                }`}\n              />\n            </button>\n            <button id=\"reset\" onClick={this.handleReset}>\n              <i className=\"fa fa-2x fa-refresh\" />\n            </button>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}